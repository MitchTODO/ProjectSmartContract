var TeamContract = artifacts.require('ProjectContent.sol')

contract('ProjectContent', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var ownerID = accounts[0]
    console.log(ownerID)
    const projectCreator = accounts[1]
    // Varabiles to set within the contract
    const projectTitle = "HouseSiding"
    const projectLocation = "299 Race Ave. Dacula, GA 30019"
    const projectStart = "May 14, 2021"
    const projectEnd = "June 15, 2021"
    const teamType = "Collaboration"

    console.log("<----------------ACCOUNTS----------------> ")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Project creator: accounts[1] ", accounts[1])
    console.log("<-------TESTING CONTRACT FUNCTIONS------->")

    it("Testing smart contract function ProjectContent", async() => {
        const contract = await TeamContract.deployed();
        console.log(contract);
        //let metaData = contract.constructor._json.metadata
        //console.log(metaData);
        //console.log(metaData['output']);
        //const json = '{"result":true, "count":42}';
        //const obj = JSON.parse(metaData);

        //console.log(obj.output.abi);

        // Declare and Initialize a variable for event
        //var eventEmitted = false;

        //var result = await supplyChain.userRequestRide.estimateGas(userName, userPickUpAddress, userDropOffAddress, userVehicleRequestType, ridePrice, {from:userID,value:balance})
        await contract.projectContent(projectTitle, projectLocation, projectStart, projectEnd, teamType, {from:projectCreator})

        // check for last past emitted events

        //await contract.getPastEvents('projectContent', {
      //      fromBlock: 0,
      //      toBlock: 'latest'
      //  }, (error, events) => { console.log(events,error); })
      //  .then((events) => {
      //      rideID = events[0].returnValues.rideID;
      //      eventEmitted = true;
      //      assert.equal(eventEmitted, true, 'Error: I');
      //  });

    });




    it("Testing smart contract function getProjectTitle", async() => {
        const contract = await TeamContract.deployed();

        // Declare and Initialize a variable for event
        //var eventEmitted = false;
        await contract.getProjectTitle({from: projectCreator});

        // Watch the emitted event Processed()
        //await contract.getPastEvents('DriverAcceptsRide', {
      //      fromBlock: 0,
      //      toBlock: 'latest'
      //  }, (error, events) => { console.log(events,error); })
      //  .then((events) => {
      //      eventEmitted = true;
      //      assert.equal(eventEmitted, true, 'Error: Invalid item SKU');
            //console.log(events) // same results as the optional callback above
      //  });
    });


    it("Testing smart contract function getProjectLocation", async() => {
        const contract = await TeamContract.deployed();
        await contract.getProjectLocation({from: projectCreator});

        //await contract.getPastEvents('PassengerConfirmsPickUp', {
        //    fromBlock: 0,
        //    toBlock: 'latest'
        //}, (error, events) => { console.log(events,error); })
        //.then((events) => {
        //    eventEmitted = true;
        //    assert.equal(eventEmitted, true, 'Error: Invalid item SKU');
        //});
      });




      it("Testing smart contract function getProjectStart", async() => {
          const contract = await TeamContract.deployed();
          await contract.getProjectStart({from: projectCreator});
          /*
          await contract.getPastEvents('DriverConfirmsDropOff', {
              fromBlock: 0,
              toBlock: 'latest'
          }, (error, events) => { console.log(events,error); })
          .then((events) => {
              eventEmitted = true;
              assert.equal(eventEmitted, true, 'Error: Invalid item SKU');
        });
        */
    });

    it("Testing smart contract function getProjectEnd", async() => {
      const contract = await TeamContract.deployed();
      await contract.getProjectEnd({from:projectCreator});
    });

    it("Testing smart contract function getTeamType", async() => {
      const contract = await TeamContract.deployed();
      await contract.getTeamType({from:projectCreator});
    });


        //it("Testing smart contract function cancelRide", async() => {
        //    const contract = await RideContract.deployed()

            // Declare and Initialize a variable for event
        //    var eventEmitted = false;
            //await contract.cancelRide(userID,{from: driverID});

            // Watch the emitted event Processed()
        //    await contract.getPastEvents('DriverAcceptsRide', {
        //        fromBlock: 0,
        //        toBlock: 'latest'
        //    }, (error, events) => { console.log(events,error); })
        //    .then((events) => {
        //        eventEmitted = true;
        //        assert.equal(eventEmitted, true, 'Error: Invalid item SKU');
                //console.log(events) // same results as the optional callback above
        //    });
        //});

/*
    it("Testing smart contract fetchDriverBuffer", async() => {
        const contract = await RideContract.deployed()
        //const resultFetchItemHistory = await supplyChain.fetchitemHistory(rideID);
        const resultBufferTwo = await contract.fetchDriverBuffer({from:driverID});
        console.log(resultBufferTwo);
    });

    it("Testing smart contract fetchItemOne", async() => {
      const contract = await RideContract.deployed()
      //const resultFetchItemHistory = await supplyChain.fetchitemHistory(rideID);
      const resultBufferTwo = await contract.fetchItemBufferOne(userID);
      console.log(resultBufferTwo);
    });

    it("Testing smart contract fetchItemTwo", async() => {
      const contract = await RideContract.deployed()
      //const resultFetchItemHistory = await supplyChain.fetchitemHistory(rideID);
      const resultBufferTwo = await contract.fetchItemBufferTwo(userID);
      console.log(resultBufferTwo);
    });


    it("Testing smart contract fetchItemThree", async() => {
      const contract = await RideContract.deployed()
      //const resultFetchItemHistory = await supplyChain.fetchitemHistory(rideID);
      const resultBufferThree = await contract.fetchItemBufferThree(userID);
      console.log(resultBufferThree);
    });

    it("Testing smart contract fetchItemHistory", async() => {
      const contract = await RideContract.deployed()
      //const resultFetchItemHistory = await supplyChain.fetchitemHistory(rideID);
      const resultBufferHistory = await contract.fetchItemHistory(userID);
      console.log(resultBufferHistory);
    });
*/
});
